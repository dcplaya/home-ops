---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app sonarr
spec:
  interval: 15m
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 3
      strategy: uninstall
  rollback:
    recreate: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  values:
    global:
      nameOverride: *app

    controllers:
      sonarr:
        annotations:
          reloader.stakater.com/auto: "true"
        # initContainers:
        #   init-db:
        #     image:
        #       repository: ghcr.io/home-operations/postgres-init
        #       tag: 17.4
        #     envFrom: &envFrom
        #       - secretRef:
        #           name: sonarr-secret

        containers:
          app:
            image:
              repository: ghcr.io/home-operations/sonarr
              tag: 4.0.14.2938
              pullPolicy: IfNotPresent
            env:
              TZ: "${TIMEZONE}"
              SONARR__APP__INSTANCENAME: Sonarr
              SONARR__APP__THEME: dark
              SONARR__SERVER__PORT: &port 8989
              SONARR__APPLICATION_URL: &host "sonarr.${INGRESS_DOMAIN}"
              SONARR_AUTH__METHOD: Forms
              SONARR_AUTH__REQUIRED: Enabled
              SONARR__LOG_LEVEL: info
              SONARR__UPDATE__BRANCH: develop
              SONARR__LOG__DBENABLED: "False"
            envFrom:
              - secretRef:
                  name: sonarr-secret
            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ "ALL" ] }
            resources:
              requests:
                cpu: 1m
              # limits:
              #   memory: 2Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port

    persistence:
      config:
        enabled: true
        existingClaim: ${VOLSYNC_CLAIM}
      config-cache:
        existingClaim: sonarr-cache
        globalMounts:
          - path: /config/MediaCover
      tmp:
        type: emptyDir
      tv:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-tv
        advancedMounts:
          sonarr:
            app:
            - path: /mnt/unionfs/Media/TV
      downloads:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-downloads
        advancedMounts:
          sonarr:
            app:
            - path: /mnt/unionfs/downloads
      backup:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-backups
        advancedMounts:
          sonarr:
            app:
            - path: /config/Backups

    route:
      app:
        hostnames: 
          - "{{ .Release.Name }}.${INGRESS_DOMAIN}"
        parentRefs:
          - name: external
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

